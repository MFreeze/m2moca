\ProvidesPackage{scheduling}
\RequirePackage{tikz}

\newcounter{task}
\newcounter{resa}
\newcounter{hole}

\newcommand{\tlabel}{nolabel}

% <<< Nombre fixé de machines
\newenvironment{ordo}[4][12]
% 1 : Longueur Max en cm
% 2 : Nbre de machines
% 3 : Pas en abscisse
% 4 : xmax
{
    \setcounter{task}{0}
    \setcounter{resa}{0}
    \setcounter{hole}{0}
    \begin{center}
    \begin{tikzpicture}[>=latex]
        \pgfmathparse{#3/#4 * (#1-1)} \let\xpas\pgfmathresult
        \pgfmathparse{int(#4/#3)} \let\nbpas\pgfmathresult
        \pgfmathparse{\xpas/#3} \let\unitxpas\pgfmathresult

        \pgfmathparse{#1-1+\xpas} \let\begx\pgfmathresult
        
        \draw[thick] (\begx,0) -- (0,0) -- (0,#2) -- (\begx,#2);
        \draw[thick,dashed] (\begx,0) -- (\begx+\xpas,0);
        \draw[thick,dashed] (\begx,#2) -- (\begx+\xpas,#2);

        \node[below] at (0, 0) {$0$};

        \foreach \x in {1,...,\nbpas}{
            \pgfmathparse{\x * \xpas} \let\abscisse\pgfmathresult
            \pgfmathparse{int(\x * #3)} \let\xlabel\pgfmathresult

            \node[below] at (\abscisse, 0) {$\xlabel$};
            \draw[dotted] (\abscisse,0) to (\abscisse,#2);
        }

        \pgfmathparse{(\nbpas + 1) * \xpas} \let\abscisse\pgfmathresult
        \node[above] at (\abscisse, -0.4) {$\dots$};

        \foreach \y in {1,...,#2}{
            \pgfmathparse{\y - 0.5} \let\ordlabel\pgfmathresult

            \node[left] at (0, \ordlabel) {$M_\y$};
            \draw[dotted] (0, \y) to (\begx + \xpas, \y);
        }
}
{\end{tikzpicture}\end{center}}
% >>>
% <<< k machines k non fixé
\newenvironment{ordok}[4][12]
% 1 : Max
% 2 : Nbre de machines avant ...
% 3 : Pas en abscisse
% 4 : xmax
{
    \setcounter{task}{0}
    \setcounter{resa}{0}
    \setcounter{hole}{0}
    \begin{center}
    \begin{tikzpicture}[>=latex]
        \pgfmathparse{#3/#4 * #1} \let\xpas\pgfmathresult
        \pgfmathparse{int(#4/#3)} \let\nbpas\pgfmathresult
        \pgfmathparse{\xpas/#3} \let\unitxpas\pgfmathresult
        
        \pgfmathparse{#1-1+\xpas} \let\begx\pgfmathresult

        \draw[thick] (\begx+\xpas,0) -- (0,0) -- (0,#2+2) -- (\begx+\xpas,#2+2);
        \draw[thick,dashed] (\begx,0) -- (\begx+\xpas,0);
        \draw[thick,dashed] (\begx,#2+2) -- (\begx+\xpas,#2+2);

        \node[below] at (0, 0) {$0$};

        \foreach \x in {1,...,\nbpas}{
            \pgfmathparse{\x * \xpas} \let\abscisse\pgfmathresult
            \pgfmathparse{int(\x * #3)} \let\xlabel\pgfmathresult

            \node[below] at (\abscisse, 0) {$\xlabel$};
            \draw[dotted] (\abscisse,0) to (\abscisse,#2);
            \draw[dotted] (\abscisse,#2+1) to (\abscisse,#2+2);
        }

        \pgfmathparse{(\nbpas + 1) * \xpas} \let\abscisse\pgfmathresult
        \node[above] at (\abscisse, -0.4) {$\dots$};

        \foreach \y in {1,...,#2}{
            \pgfmathparse{\y - 0.5} \let\ordlabel\pgfmathresult

            \node[left] at (0, \ordlabel) {$M_\y$};
            \draw[dotted] (0, \y) to (\begx+\xpas, \y);
        }

        \node[left] at (0, #2 + 0.6) {$\vdots$};
        \node[left] at (0, #2 + 1.5) {$k$};
        \draw[dotted]  (0, #2 + 1) to (\begx+\xpas, #2 + 1);
}
{\end{tikzpicture}\end{center}}
% >>>
% <<< \newtask[label]{duree}{machine}{début}
% TODO Vérifier que le nombre de machines est suffisant
\newcommand{\newtask}[4][n]{
    % 1 : Label de la tâche
    % 2 : Durée de la tâche
    % 3 : Numéro de machine
    % 4 : Date de début
    
    \ifthenelse{\equal{#1}{n}}
    {\addtocounter{task}{1}
    \renewcommand{\tlabel}{$T_{\thetask}$}}
    {\renewcommand{\tlabel}{#1}}

    \pgfmathparse{#4*\unitxpas} \let\initx\pgfmathresult
    \pgfmathparse{#3-0.9}       \let\inity\pgfmathresult
    \pgfmathparse{#2*\unitxpas} \let\longx\pgfmathresult

    \fill[black!30] (\initx, \inity) rectangle +(\longx, 0.8);
    \node at (\initx + \longx/2, \inity + 0.4) {\tlabel};
}
% >>>
%% <<< \newunlabeledresa{duree}{machine}{debut}
%\newcommand{\newresa}[3]{
%    % 1 : Durée de la réservation
%    % 2 : Numéro de machine
%    % 3 : Date de début
%    \pgfmathparse{#3*\unitxpas} \let\initx\pgfmathresult
%    \pgfmathparse{#2-0.9}       \let\inity\pgfmathresult
%    \pgfmathparse{#1*\unitxpas} \let\longx\pgfmathresult
%
%    \fill[black] (\initx, \inity) rectangle +(\longx, 0.8);
%}
%% >>>
% <<< \newlabeledresa[label]{duree}{machine}{debut}
\newcommand{\newresa}[4][n]{
    % 1 : Label de la réservation
    % 2 : Durée de la réservation
    % 3 : Numéro de machine
    % 4 : Date de début
    
    \ifthenelse{\equal{#1}{n}}
    {\addtocounter{resa}{1}
    \renewcommand{\tlabel}{$R_{\theresa}$}}
    {\renewcommand{\tlabel}{#1}}

    \pgfmathparse{#4*\unitxpas} \let\initx\pgfmathresult
    \pgfmathparse{#3-0.9}       \let\inity\pgfmathresult
    \pgfmathparse{#2*\unitxpas} \let\longx\pgfmathresult

    \fill[black] (\initx, \inity) rectangle +(\longx, 0.8);
    \node[white] at (\initx + \longx/2, \inity + 0.4) {\tlabel};
}
% >>>
% <<< \newhole[label]{duree}{machine}{debut}
\newcommand{\newhole}[4][n]{
    % 1 : Durée du trou
    % 2 : Numéro de machine
    % 3 : Date de début
    % 4 : Label du trou
    
    \ifthenelse{\equal{#1}{n}}
    {\addtocounter{hole}{1}
    \renewcommand{\tlabel}{$h_{\thehole}$}}
    {\renewcommand{\tlabel}{#1}}

    \pgfmathparse{#4*\unitxpas} \let\initx\pgfmathresult
    \pgfmathparse{#3-0.7}       \let\inity\pgfmathresult
    \pgfmathparse{#2*\unitxpas} \let\longx\pgfmathresult

    \draw[<->] (\initx, \inity) to node[above] {\tlabel} (\initx + \longx, \inity);
}
% >>>
% <<< \newbeghole[label]{duree}{machine}
\newcommand{\newbeghole}[3][n]{
    % 1 : Label du trou
    % 2 : Durée du trou
    % 3 : Numéro de machine
    
    \ifthenelse{\equal{#1}{n}}
    {\addtocounter{hole}{1}
    \renewcommand{\tlabel}{$h_{\thehole}$}}
    {\renewcommand{\tlabel}{#1}}

    \pgfmathparse{0*\unitxpas} \let\initx\pgfmathresult
    \pgfmathparse{#3-0.7}       \let\inity\pgfmathresult
    \pgfmathparse{#2*\unitxpas} \let\longx\pgfmathresult

    \draw[->] (\initx, \inity) to node[above] {\tlabel} (\initx + \longx, \inity);
    \draw[-,dashed] (\initx - 1, \inity) to (\initx, \inity);
}
% >>>
% <<< \newendhole[label]{duree}{machine}{debut}
\newcommand{\newendhole}[4][n]{
    % 1 : Label du trou
    % 2 : Durée du trou
    % 3 : Numéro de machine
    % 4 : Date de début
    
    \ifthenelse{\equal{#1}{n}}
    {\addtocounter{hole}{1}
    \renewcommand{\tlabel}{$h_{\thehole}$}}
    {\renewcommand{\tlabel}{#1}}

    \pgfmathparse{#4*\unitxpas} \let\initx\pgfmathresult
    \pgfmathparse{#3-0.7}       \let\inity\pgfmathresult
    \pgfmathparse{#2*\unitxpas} \let\longx\pgfmathresult

    \draw[<-] (\initx, \inity) to node[above] {\tlabel} (\initx + \longx, \inity);
    \draw[-,dashed] (\initx + \longx, \inity) to (\initx + \longx + 2*\unitxpas, \inity);
}
% >>>
% <<< \adjust{nbmachine}{debmachine}
\newcommand{\adjust}[2]{
    \pgfmathparse{#1-0.2}       \let\longy\pgfmathresult
    \pgfmathparse{#2-0.9}       \let\inity\pgfmathresult

    \fill[black!0] (0, \inity) rectangle +(1, \longy);
}


% <<< Taches
%% Début d'une tâche
\newcommand{\st}[1]{ r^{\mathcal{T}}_{#1} }
%% Fin d'une tâche
\newcommand{\ct}[1]{ \widetilde{d}^{\mathcal{T}}_{#1} }
%% Durée d'une tâche
\newcommand{\pt}[1]{ p^{\mathcal{T}}_{#1} }
% >>>
% <<< Resa
%% Début d'une réservation
\newcommand{\sres}[1]{ r^{\mathcal{R}}_{#1} }
%% Fin d'une réservation
\newcommand{\cres}[1]{ \widetilde{d}^{\mathcal{R}}_{#1} }
%% Durée d'une réservation
\newcommand{\pres}[1]{ p^{\mathcal{R}}_{#1} }
% >>>
% <<< Hole
%% Début d'un trou
\newcommand{\sho}[1]{ r^{\mathcal{H}}_{#1} }
%% Fin d'un trou
\newcommand{\cho}[1]{ \widetilde{d}^{\mathcal{H}}_{#1} }
%% Durée d'un trou
\newcommand{\pho}[1]{ p^{\mathcal{H}}_{#1} }
% >>>
% <<< Evénement général
%% Début d'un événement général (tache ou réservation)
\newcommand{\sgen}[1]{ r_{#1} }
%% Fin d'un événement général
\newcommand{\cgen}[1]{ \widetilde{d}_{#1} }
%% Durée d'un événement général
\newcommand{\pgen}[1]{ p_{#1} }
% >>>
% <<< Intervalle
%% Début d'un intervalle
\newcommand{\sint}[1]{ s_{#1} }
%% Fin d'un intervalle général
\newcommand{\cint}[1]{ c_{#1} }
%% Durée d'un intervalle
\newcommand{\pint}[1]{ l_{#1} }
% >>>
